version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: phishguard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-phishguard}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-phishguard}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - phishguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phishguard"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: phishguard-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - phishguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: phishguard-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-phishguard}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-phishguard}
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - phishguard-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: phishguard-frontend
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:80"
    depends_on:
      - backend
    networks:
      - phishguard-network

volumes:
  postgres_data:
  redis_data:

networks:
  phishguard-network:
    driver: bridge
